
bin\Debug\rf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002ba  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800062  00800062  00000350  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001e4  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074c  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000027e  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000591  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000256  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000275  00000000  00000000  000018d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	69 c0       	rjmp	.+210    	; 0xd6 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea eb       	ldi	r30, 0xBA	; 186
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 38       	cpi	r26, 0x84	; 132
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	08 d1       	rcall	.+528    	; 0x26a <main>
  5a:	2d c1       	rjmp	.+602    	; 0x2b6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <rfReceived>:

// handles the reception of rfPacket and filling of the buffer
void rfReceived(void)
{
    // check if the receivedFlag is one if so raise assert
    receivedFlag = 1;
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	80 93 62 00 	sts	0x0062, r24
}
  64:	08 95       	ret

00000066 <rfTransmited>:

// handles the confirmation of transmission
void rfTransmited(void)
{
    // check if the transmittedFlag is one if so raise assert
    transmittedFlag = 1;
  66:	81 e0       	ldi	r24, 0x01	; 1
  68:	80 93 63 00 	sts	0x0063, r24
}
  6c:	08 95       	ret

0000006e <rfStatus>:
// rf status
uint8_t rfStatus(void)
{
    uint8_t status;

    CSN_LOW;
  6e:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData(NOP);
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	1c d1       	rcall	.+568    	; 0x2ac <spiSendData>
    CSN_HIGH;
  74:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
  76:	08 95       	ret

00000078 <rfFlushTx>:
// flush TX FIFO
uint8_t rfFlushTx(void)
{
    uint8_t status;

    CSN_LOW;
  78:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( FLUSH_TX );
  7a:	81 ee       	ldi	r24, 0xE1	; 225
  7c:	17 d1       	rcall	.+558    	; 0x2ac <spiSendData>
    CSN_HIGH;
  7e:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
  80:	08 95       	ret

00000082 <rfFlushRx>:
// flush rx FIFO
uint8_t rfFlushRx(void)
{
    uint8_t status;

    CSN_LOW;
  82:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( FLUSH_RX );
  84:	82 ee       	ldi	r24, 0xE2	; 226
  86:	12 d1       	rcall	.+548    	; 0x2ac <spiSendData>
    CSN_HIGH;
  88:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
  8a:	08 95       	ret

0000008c <rfStopListening>:
}

// stops listening
void rfStopListening(void)
{
    CE_LOW;
  8c:	c6 98       	cbi	0x18, 6	; 24
    rfFlushTx();
  8e:	f4 df       	rcall	.-24     	; 0x78 <rfFlushTx>
    rfFlushRx();
  90:	f8 df       	rcall	.-16     	; 0x82 <rfFlushRx>
}
  92:	08 95       	ret

00000094 <rfReadPayload>:
    return status;
}

// reads the rfPayload into local buffer
uint8_t rfReadPayload(uint8_t len)
{
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	f8 2e       	mov	r15, r24
    uint8_t status;

    CSN_LOW;
  9e:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( R_RX_PAYLOAD );
  a0:	81 e6       	ldi	r24, 0x61	; 97
  a2:	04 d1       	rcall	.+520    	; 0x2ac <spiSendData>
  a4:	e8 2e       	mov	r14, r24
  a6:	0e c0       	rjmp	.+28     	; 0xc4 <rfReadPayload+0x30>
    while ( len-- )
        *rfPtrBuffer++ = spiSendData(NOP);
  a8:	10 91 60 00 	lds	r17, 0x0060
  ac:	00 91 61 00 	lds	r16, 0x0061
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	fc d0       	rcall	.+504    	; 0x2ac <spiSendData>
  b4:	e1 2f       	mov	r30, r17
  b6:	f0 2f       	mov	r31, r16
  b8:	81 93       	st	Z+, r24
  ba:	f0 93 61 00 	sts	0x0061, r31
  be:	e0 93 60 00 	sts	0x0060, r30
  c2:	fa 94       	dec	r15
{
    uint8_t status;

    CSN_LOW;
    status = spiSendData( R_RX_PAYLOAD );
    while ( len-- )
  c4:	ff 20       	and	r15, r15
  c6:	81 f7       	brne	.-32     	; 0xa8 <rfReadPayload+0x14>
        *rfPtrBuffer++ = spiSendData(NOP);
    CSN_HIGH;
  c8:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
  ca:	8e 2d       	mov	r24, r14
  cc:	1f 91       	pop	r17
  ce:	0f 91       	pop	r16
  d0:	ff 90       	pop	r15
  d2:	ef 90       	pop	r14
  d4:	08 95       	ret

000000d6 <__vector_1>:

    return status;
}

ISR(INT0_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	4f 93       	push	r20
  e6:	5f 93       	push	r21
  e8:	6f 93       	push	r22
  ea:	7f 93       	push	r23
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
    uint8_t status;
    status = rfStatus();
  fc:	b8 df       	rcall	.-144    	; 0x6e <rfStatus>

    if(CHECK_BIT(status, RX_DR))
  fe:	c8 2f       	mov	r28, r24
 100:	86 ff       	sbrs	r24, 6
 102:	05 c0       	rjmp	.+10     	; 0x10e <__vector_1+0x38>

// handles the reception of rfPacket and filling of the buffer
void rfReceived(void)
{
    // check if the receivedFlag is one if so raise assert
    receivedFlag = 1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 62 00 	sts	0x0062, r24
    status = rfStatus();

    if(CHECK_BIT(status, RX_DR))
    {
        rfReceived();
        rfReadPayload(32);
 10a:	80 e2       	ldi	r24, 0x20	; 32
 10c:	c3 df       	rcall	.-122    	; 0x94 <rfReadPayload>
    }

    if(CHECK_BIT(status, TX_DS))
 10e:	c5 ff       	sbrs	r28, 5
 110:	03 c0       	rjmp	.+6      	; 0x118 <__vector_1+0x42>

// handles the confirmation of transmission
void rfTransmited(void)
{
    // check if the transmittedFlag is one if so raise assert
    transmittedFlag = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 63 00 	sts	0x0063, r24

    if(CHECK_BIT(status, TX_DS))
    {
        rfTransmited();
    }
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	7f 91       	pop	r23
 12a:	6f 91       	pop	r22
 12c:	5f 91       	pop	r21
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <rfWritePayload>:
    return status;
}

// writes the rfPayload from local buffer
uint8_t rfWritePayload(const uint8_t* buf, uint8_t len)
{
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
 148:	16 2f       	mov	r17, r22
    uint8_t status;

    CSN_LOW;
 14a:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( W_TX_PAYLOAD );
 14c:	80 ea       	ldi	r24, 0xA0	; 160
 14e:	ae d0       	rcall	.+348    	; 0x2ac <spiSendData>
 150:	08 2f       	mov	r16, r24
 152:	03 c0       	rjmp	.+6      	; 0x15a <rfWritePayload+0x1c>
    while ( len-- )
        spiSendData(*buf++);
 154:	89 91       	ld	r24, Y+
 156:	aa d0       	rcall	.+340    	; 0x2ac <spiSendData>
 158:	11 50       	subi	r17, 0x01	; 1
{
    uint8_t status;

    CSN_LOW;
    status = spiSendData( W_TX_PAYLOAD );
    while ( len-- )
 15a:	11 23       	and	r17, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <rfWritePayload+0x16>
        spiSendData(*buf++);
    CSN_HIGH;
 15e:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
 160:	80 2f       	mov	r24, r16
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	08 95       	ret

0000016c <rfWriteRegChar>:
    return status;
}

// writes to the register
uint8_t rfWriteRegChar(uint8_t reg, uint8_t value)
{
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	06 2f       	mov	r16, r22
    uint8_t status;

    CSN_LOW;
 172:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( W_REGISTER | reg );
 174:	80 62       	ori	r24, 0x20	; 32
 176:	9a d0       	rcall	.+308    	; 0x2ac <spiSendData>
 178:	18 2f       	mov	r17, r24
    spiSendData(value);
 17a:	80 2f       	mov	r24, r16
 17c:	97 d0       	rcall	.+302    	; 0x2ac <spiSendData>
    CSN_HIGH;
 17e:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
 180:	81 2f       	mov	r24, r17
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	08 95       	ret

00000188 <rfWriteRegBuff>:
    return result;
}

// writes to the register from buffer
uint8_t rfWriteRegBuff(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	eb 01       	movw	r28, r22
 192:	14 2f       	mov	r17, r20
    uint8_t status;

    CSN_LOW;
 194:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( W_REGISTER | reg );
 196:	80 62       	ori	r24, 0x20	; 32
 198:	89 d0       	rcall	.+274    	; 0x2ac <spiSendData>
 19a:	08 2f       	mov	r16, r24
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <rfWriteRegBuff+0x1c>
    while ( len-- )
        spiSendData(*buf++);
 19e:	89 91       	ld	r24, Y+
 1a0:	85 d0       	rcall	.+266    	; 0x2ac <spiSendData>
 1a2:	11 50       	subi	r17, 0x01	; 1
{
    uint8_t status;

    CSN_LOW;
    status = spiSendData( W_REGISTER | reg );
    while ( len-- )
 1a4:	11 23       	and	r17, r17
 1a6:	d9 f7       	brne	.-10     	; 0x19e <rfWriteRegBuff+0x16>
        spiSendData(*buf++);
    CSN_HIGH;
 1a8:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
 1aa:	80 2f       	mov	r24, r16
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <rfReadRegChar>:
}

// reads the register and returns it
uint8_t rfReadRegChar(uint8_t reg)
{
    CSN_LOW;
 1b6:	c7 98       	cbi	0x18, 7	; 24
    spiSendData( R_REGISTER | reg );
 1b8:	79 d0       	rcall	.+242    	; 0x2ac <spiSendData>
    uint8_t result = spiSendData(0xff);
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	77 d0       	rcall	.+238    	; 0x2ac <spiSendData>
    CSN_HIGH;
 1be:	c7 9a       	sbi	0x18, 7	; 24

    return result;
}
 1c0:	08 95       	ret

000001c2 <rfToPowerDown>:
}

// changes the state of the tranciver to powerDown mode
void rfToPowerDown(void)
{
    rfWriteRegChar(CONFIG, CLEAR_BIT(rfReadRegChar(CONFIG), PWR_UP));
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	f8 df       	rcall	.-16     	; 0x1b6 <rfReadRegChar>
 1c6:	68 2f       	mov	r22, r24
 1c8:	6d 7f       	andi	r22, 0xFD	; 253
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	cf df       	rcall	.-98     	; 0x16c <rfWriteRegChar>
}
 1ce:	08 95       	ret

000001d0 <rfToStandbyOne>:
}

// changes the state of the tranciver to standby mode one
void rfToStandbyOne(void)
{
    rfWriteRegChar(CONFIG, SET_BIT(rfReadRegChar(CONFIG), PWR_UP));
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	f1 df       	rcall	.-30     	; 0x1b6 <rfReadRegChar>
 1d4:	68 2f       	mov	r22, r24
 1d6:	62 60       	ori	r22, 0x02	; 2
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	c8 df       	rcall	.-112    	; 0x16c <rfWriteRegChar>
 1dc:	80 ed       	ldi	r24, 0xD0	; 208
 1de:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e0:	28 ec       	ldi	r18, 0xC8	; 200
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	f9 01       	movw	r30, r18
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <rfToStandbyOne+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ec:	d9 f7       	brne	.-10     	; 0x1e4 <rfToStandbyOne+0x14>

    _delay_ms(200);
}
 1ee:	08 95       	ret

000001f0 <rfStartListening>:
}

// continously listens
void rfStartListening(void)
{
    rfToStandbyOne();
 1f0:	ef df       	rcall	.-34     	; 0x1d0 <rfToStandbyOne>
    CE_LOW;
 1f2:	c6 98       	cbi	0x18, 6	; 24
    rfWriteRegChar(CONFIG, SET_BIT(rfReadRegChar(CONFIG), PRIM_RX));
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	df df       	rcall	.-66     	; 0x1b6 <rfReadRegChar>
 1f8:	68 2f       	mov	r22, r24
 1fa:	61 60       	ori	r22, 0x01	; 1
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	b6 df       	rcall	.-148    	; 0x16c <rfWriteRegChar>
 200:	84 e0       	ldi	r24, 0x04	; 4
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <rfStartListening+0x14>
    _delay_us(130);
    CE_HIGH;
 208:	c6 9a       	sbi	0x18, 6	; 24
}
 20a:	08 95       	ret

0000020c <rfTransmit>:
volatile uint8_t rfBuffer[32];
volatile uint8_t *rfPtrBuffer = rfBuffer;

// handles the transmission of rfPacket
void rfTransmit(uint8_t* buff, uint8_t len)
{
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	8c 01       	movw	r16, r24
 214:	f6 2e       	mov	r15, r22
    rfToStandbyOne();
 216:	dc df       	rcall	.-72     	; 0x1d0 <rfToStandbyOne>
    rfWritePayload(buff, len);
 218:	c8 01       	movw	r24, r16
 21a:	6f 2d       	mov	r22, r15
 21c:	90 df       	rcall	.-224    	; 0x13e <rfWritePayload>
    uint8_t result = rfReadRegChar(CONFIG);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	ca df       	rcall	.-108    	; 0x1b6 <rfReadRegChar>
    rfWriteRegChar(CONFIG, CLEAR_BIT(result, PRIM_RX));
 222:	68 2f       	mov	r22, r24
 224:	6e 7f       	andi	r22, 0xFE	; 254
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	a1 df       	rcall	.-190    	; 0x16c <rfWriteRegChar>
    CE_HIGH;
 22a:	c6 9a       	sbi	0x18, 6	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 22c:	8a e1       	ldi	r24, 0x1A	; 26
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <rfTransmit+0x22>
    _delay_us(10);
    CE_LOW;
 232:	c6 98       	cbi	0x18, 6	; 24
}
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	ff 90       	pop	r15
 23a:	08 95       	ret

0000023c <rfReadRegBuff>:
    rfWriteRegChar(CONFIG, CLEAR_BIT(rfReadRegChar(CONFIG), PWR_UP));
}

// reads the register and writes to the buffer
uint8_t rfReadRegBuff(uint8_t reg, uint8_t* buf, uint8_t len)
{
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	eb 01       	movw	r28, r22
 246:	14 2f       	mov	r17, r20
    uint8_t status;

    CSN_LOW;
 248:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( R_REGISTER | reg );
 24a:	30 d0       	rcall	.+96     	; 0x2ac <spiSendData>
 24c:	08 2f       	mov	r16, r24
 24e:	04 c0       	rjmp	.+8      	; 0x258 <rfReadRegBuff+0x1c>
    while ( len-- )
        *buf++ = spiSendData(0xff);
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	2c d0       	rcall	.+88     	; 0x2ac <spiSendData>
 254:	89 93       	st	Y+, r24
 256:	11 50       	subi	r17, 0x01	; 1
{
    uint8_t status;

    CSN_LOW;
    status = spiSendData( R_REGISTER | reg );
    while ( len-- )
 258:	11 23       	and	r17, r17
 25a:	d1 f7       	brne	.-12     	; 0x250 <rfReadRegBuff+0x14>
        *buf++ = spiSendData(0xff);
    CSN_HIGH;
 25c:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
 25e:	80 2f       	mov	r24, r16
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	08 95       	ret

0000026a <main>:

int main(void)
{

    return 0;
}
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	08 95       	ret

00000270 <spiInit>:

// initializing spi
void spiInit(void)
{
    // enabling spi
    SPCR |= (1<<SPE);
 270:	6e 9a       	sbi	0x0d, 6	; 13
    // selecting master mode
    SPCR |= (1<<MSTR);
 272:	6c 9a       	sbi	0x0d, 4	; 13
    // making pins output, the miso pin will be made input when spi is enabled
    SPI_DDR |= (1<<MOSI) | (1<<SCK);
 274:	87 b3       	in	r24, 0x17	; 23
 276:	88 62       	ori	r24, 0x28	; 40
 278:	87 bb       	out	0x17, r24	; 23
}
 27a:	08 95       	ret

0000027c <spiSendBuffer>:

// sending the data stored in the buffer.
void spiSendBuffer(uint8_t *buffer, uint8_t len)
{
 27c:	fc 01       	movw	r30, r24
    do
    {
        SPI_DATA = *buffer;
 27e:	80 81       	ld	r24, Z
 280:	8f b9       	out	0x0f, r24	; 15
        SPI_SEND;
 282:	77 9b       	sbis	0x0e, 7	; 14
 284:	fe cf       	rjmp	.-4      	; 0x282 <spiSendBuffer+0x6>
        buffer++;
    }
    while(len--);
 286:	66 23       	and	r22, r22
 288:	19 f0       	breq	.+6      	; 0x290 <spiSendBuffer+0x14>
{
    do
    {
        SPI_DATA = *buffer;
        SPI_SEND;
        buffer++;
 28a:	31 96       	adiw	r30, 0x01	; 1
    }
    while(len--);
 28c:	61 50       	subi	r22, 0x01	; 1
 28e:	f7 cf       	rjmp	.-18     	; 0x27e <spiSendBuffer+0x2>
 290:	08 95       	ret

00000292 <spiGetBuffer>:
}

// gets the data from the radio and stores in the buffer
void spiGetBuffer(uint8_t *buffer, uint8_t len)
{
 292:	fc 01       	movw	r30, r24
    do
    {
        SPI_DATA = 0xff;
 294:	9f ef       	ldi	r25, 0xFF	; 255
 296:	9f b9       	out	0x0f, r25	; 15
        SPI_SEND;
 298:	77 9b       	sbis	0x0e, 7	; 14
 29a:	fe cf       	rjmp	.-4      	; 0x298 <spiGetBuffer+0x6>
        *buffer = SPI_DATA;
 29c:	8f b1       	in	r24, 0x0f	; 15
 29e:	80 83       	st	Z, r24
        buffer++;
    }
    while(len--);
 2a0:	66 23       	and	r22, r22
 2a2:	19 f0       	breq	.+6      	; 0x2aa <spiGetBuffer+0x18>
    do
    {
        SPI_DATA = 0xff;
        SPI_SEND;
        *buffer = SPI_DATA;
        buffer++;
 2a4:	31 96       	adiw	r30, 0x01	; 1
    }
    while(len--);
 2a6:	61 50       	subi	r22, 0x01	; 1
 2a8:	f6 cf       	rjmp	.-20     	; 0x296 <spiGetBuffer+0x4>
 2aa:	08 95       	ret

000002ac <spiSendData>:
// sends any command
uint8_t spiSendData(uint8_t data)
{
    uint8_t result;

    SPI_DATA = data;
 2ac:	8f b9       	out	0x0f, r24	; 15
    SPI_SEND;
 2ae:	77 9b       	sbis	0x0e, 7	; 14
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <spiSendData+0x2>
    result = SPI_DATA;
 2b2:	8f b1       	in	r24, 0x0f	; 15
    // returns the status
    return result;
}
 2b4:	08 95       	ret

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
