
bin\Debug\rf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000006cc  00000760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800062  00800062  00000762  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004c1  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc1  00000000  00000000  00000c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000310  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af4  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  00002648  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000515  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000606  00000000  00000000  00002ecd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	c2 c0       	rjmp	.+388    	; 0x188 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ec       	ldi	r30, 0xCC	; 204
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 38       	cpi	r26, 0x84	; 132
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	11 d3       	rcall	.+1570   	; 0x67c <main>
  5a:	36 c3       	rjmp	.+1644   	; 0x6c8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <rfReceived>:

// handles the reception of rfPacket and filling of the buffer
void rfReceived(void)
{
    // check if the receivedFlag is one if so raise assert
    receivedFlag = 1;
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	80 93 62 00 	sts	0x0062, r24
}
  64:	08 95       	ret

00000066 <rfTransmited>:

// handles the confirmation of transmission
void rfTransmited(void)
{
    // check if the transmittedFlag is one if so raise assert
    transmittedFlag = 1;
  66:	81 e0       	ldi	r24, 0x01	; 1
  68:	80 93 63 00 	sts	0x0063, r24
}
  6c:	08 95       	ret

0000006e <rfStatus>:
// rf status
uint8_t rfStatus(void)
{
    uint8_t status;

    CSN_LOW;
  6e:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData(NOP);
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	25 d3       	rcall	.+1610   	; 0x6be <spiSendData>
    CSN_HIGH;
  74:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
  76:	08 95       	ret

00000078 <rfFlushTx>:
// flush TX FIFO
uint8_t rfFlushTx(void)
{
    uint8_t status;

    CSN_LOW;
  78:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( FLUSH_TX );
  7a:	81 ee       	ldi	r24, 0xE1	; 225
  7c:	20 d3       	rcall	.+1600   	; 0x6be <spiSendData>
    CSN_HIGH;
  7e:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
  80:	08 95       	ret

00000082 <rfFlushRx>:
// flush rx FIFO
uint8_t rfFlushRx(void)
{
    uint8_t status;

    CSN_LOW;
  82:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( FLUSH_RX );
  84:	82 ee       	ldi	r24, 0xE2	; 226
  86:	1b d3       	rcall	.+1590   	; 0x6be <spiSendData>
    CSN_HIGH;
  88:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
  8a:	08 95       	ret

0000008c <rfStopListening>:
}

// stops listening
void rfStopListening(void)
{
    CE_LOW;
  8c:	c6 98       	cbi	0x18, 6	; 24
    rfFlushTx();
  8e:	f4 df       	rcall	.-24     	; 0x78 <rfFlushTx>
    rfFlushRx();
  90:	f8 df       	rcall	.-16     	; 0x82 <rfFlushRx>
}
  92:	08 95       	ret

00000094 <rfReadPayload>:
    return status;
}

// reads the rfPayload into local buffer
uint8_t rfReadPayload(uint8_t len)
{
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	f8 2e       	mov	r15, r24
    uint8_t status;

    CSN_LOW;
  9e:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( R_RX_PAYLOAD );
  a0:	81 e6       	ldi	r24, 0x61	; 97
  a2:	0d d3       	rcall	.+1562   	; 0x6be <spiSendData>
  a4:	e8 2e       	mov	r14, r24
  a6:	0e c0       	rjmp	.+28     	; 0xc4 <rfReadPayload+0x30>
    while ( len-- )
        *rfPtrBuffer++ = spiSendData(NOP);
  a8:	10 91 60 00 	lds	r17, 0x0060
  ac:	00 91 61 00 	lds	r16, 0x0061
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	05 d3       	rcall	.+1546   	; 0x6be <spiSendData>
  b4:	e1 2f       	mov	r30, r17
  b6:	f0 2f       	mov	r31, r16
  b8:	81 93       	st	Z+, r24
  ba:	f0 93 61 00 	sts	0x0061, r31
  be:	e0 93 60 00 	sts	0x0060, r30
  c2:	fa 94       	dec	r15
{
    uint8_t status;

    CSN_LOW;
    status = spiSendData( R_RX_PAYLOAD );
    while ( len-- )
  c4:	ff 20       	and	r15, r15
  c6:	81 f7       	brne	.-32     	; 0xa8 <rfReadPayload+0x14>
        *rfPtrBuffer++ = spiSendData(NOP);
    CSN_HIGH;
  c8:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
  ca:	8e 2d       	mov	r24, r14
  cc:	1f 91       	pop	r17
  ce:	0f 91       	pop	r16
  d0:	ff 90       	pop	r15
  d2:	ef 90       	pop	r14
  d4:	08 95       	ret

000000d6 <rfWriteAckPayload>:
    return status;
}

// writes the rfAckPayload from local buffer
uint8_t rfWriteAckPayload(const uint8_t* buf, uint8_t len)
{
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
  e0:	16 2f       	mov	r17, r22
    uint8_t status;

    CSN_LOW;
  e2:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( W_ACK_PAYLOAD );
  e4:	88 ea       	ldi	r24, 0xA8	; 168
  e6:	eb d2       	rcall	.+1494   	; 0x6be <spiSendData>
  e8:	08 2f       	mov	r16, r24
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <rfWriteAckPayload+0x1c>
    while ( len-- )
        spiSendData(*buf++);
  ec:	89 91       	ld	r24, Y+
  ee:	e7 d2       	rcall	.+1486   	; 0x6be <spiSendData>
  f0:	11 50       	subi	r17, 0x01	; 1
{
    uint8_t status;

    CSN_LOW;
    status = spiSendData( W_ACK_PAYLOAD );
    while ( len-- )
  f2:	11 23       	and	r17, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <rfWriteAckPayload+0x16>
        spiSendData(*buf++);
    CSN_HIGH;
  f6:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
  f8:	80 2f       	mov	r24, r16
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	08 95       	ret

00000104 <rfWritePayload>:
    return status;
}

// writes the rfPayload from local buffer
uint8_t rfWritePayload(const uint8_t* buf, uint8_t len)
{
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	16 2f       	mov	r17, r22
    uint8_t status;

    CSN_LOW;
 110:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( W_TX_PAYLOAD );
 112:	80 ea       	ldi	r24, 0xA0	; 160
 114:	d4 d2       	rcall	.+1448   	; 0x6be <spiSendData>
 116:	08 2f       	mov	r16, r24
 118:	03 c0       	rjmp	.+6      	; 0x120 <rfWritePayload+0x1c>
    while ( len-- )
        spiSendData(*buf++);
 11a:	89 91       	ld	r24, Y+
 11c:	d0 d2       	rcall	.+1440   	; 0x6be <spiSendData>
 11e:	11 50       	subi	r17, 0x01	; 1
{
    uint8_t status;

    CSN_LOW;
    status = spiSendData( W_TX_PAYLOAD );
    while ( len-- )
 120:	11 23       	and	r17, r17
 122:	d9 f7       	brne	.-10     	; 0x11a <rfWritePayload+0x16>
        spiSendData(*buf++);
    CSN_HIGH;
 124:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
 126:	80 2f       	mov	r24, r16
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	0f 91       	pop	r16
 130:	08 95       	ret

00000132 <rfWriteRegChar>:
    return status;
}

// writes to the register
uint8_t rfWriteRegChar(uint8_t reg, uint8_t value)
{
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	06 2f       	mov	r16, r22
    uint8_t status;

    CSN_LOW;
 138:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( W_REGISTER | reg );
 13a:	80 62       	ori	r24, 0x20	; 32
 13c:	c0 d2       	rcall	.+1408   	; 0x6be <spiSendData>
 13e:	18 2f       	mov	r17, r24
    spiSendData(value);
 140:	80 2f       	mov	r24, r16
 142:	bd d2       	rcall	.+1402   	; 0x6be <spiSendData>
    CSN_HIGH;
 144:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
 146:	81 2f       	mov	r24, r17
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	08 95       	ret

0000014e <rfWriteRegBuff>:
    return result;
}

// writes to the register from buffer
uint8_t rfWriteRegBuff(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	eb 01       	movw	r28, r22
 158:	14 2f       	mov	r17, r20
    uint8_t status;

    CSN_LOW;
 15a:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( W_REGISTER | reg );
 15c:	80 62       	ori	r24, 0x20	; 32
 15e:	af d2       	rcall	.+1374   	; 0x6be <spiSendData>
 160:	08 2f       	mov	r16, r24
 162:	03 c0       	rjmp	.+6      	; 0x16a <rfWriteRegBuff+0x1c>
    while ( len-- )
        spiSendData(*buf++);
 164:	89 91       	ld	r24, Y+
 166:	ab d2       	rcall	.+1366   	; 0x6be <spiSendData>
 168:	11 50       	subi	r17, 0x01	; 1
{
    uint8_t status;

    CSN_LOW;
    status = spiSendData( W_REGISTER | reg );
    while ( len-- )
 16a:	11 23       	and	r17, r17
 16c:	d9 f7       	brne	.-10     	; 0x164 <rfWriteRegBuff+0x16>
        spiSendData(*buf++);
    CSN_HIGH;
 16e:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
 170:	80 2f       	mov	r24, r16
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <rfReadRegChar>:
}

// reads the register and returns it
uint8_t rfReadRegChar(uint8_t reg)
{
    CSN_LOW;
 17c:	c7 98       	cbi	0x18, 7	; 24
    spiSendData( R_REGISTER | reg );
 17e:	9f d2       	rcall	.+1342   	; 0x6be <spiSendData>
    uint8_t result = spiSendData(0xff);
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	9d d2       	rcall	.+1338   	; 0x6be <spiSendData>
    CSN_HIGH;
 184:	c7 9a       	sbi	0x18, 7	; 24

    return result;
}
 186:	08 95       	ret

00000188 <__vector_1>:
/** \brief
 *
 *
 */
ISR(EXT_INT)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
    uint8_t status;
    status = rfStatus();
 1ae:	5f df       	rcall	.-322    	; 0x6e <rfStatus>

    if(CHECK_BIT(status, RX_DR))
 1b0:	c8 2f       	mov	r28, r24
 1b2:	86 ff       	sbrs	r24, 6
 1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <__vector_1+0x3a>

// handles the reception of rfPacket and filling of the buffer
void rfReceived(void)
{
    // check if the receivedFlag is one if so raise assert
    receivedFlag = 1;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 62 00 	sts	0x0062, r24

    if(CHECK_BIT(status, RX_DR))
    {
        SET_BIT(status, RX_DR);
        rfReceived();
        uint8_t length = rfReadRegChar(R_RX_PL_WID);
 1bc:	80 e6       	ldi	r24, 0x60	; 96
 1be:	de df       	rcall	.-68     	; 0x17c <rfReadRegChar>
        rfReadPayload(length);
 1c0:	69 df       	rcall	.-302    	; 0x94 <rfReadPayload>
    }

    if(CHECK_BIT(status, TX_DS))
 1c2:	c5 ff       	sbrs	r28, 5
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <__vector_1+0x44>

// handles the confirmation of transmission
void rfTransmited(void)
{
    // check if the transmittedFlag is one if so raise assert
    transmittedFlag = 1;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 63 00 	sts	0x0063, r24

    if(CHECK_BIT(status, MAX_RT))
    {
        SET_BIT(status, MAX_RT);
    }
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <rfRxFifoStatus>:
}

// status about the RX FIFO status
uint8_t rfRxFifoStatus(void)
{
    uint8_t status = rfReadRegChar(FIFO_STATUS);
 1f2:	87 e1       	ldi	r24, 0x17	; 23
 1f4:	c3 df       	rcall	.-122    	; 0x17c <rfReadRegChar>
    return (CHECK_BIT(status,RX_FULL));
}
 1f6:	82 70       	andi	r24, 0x02	; 2
 1f8:	08 95       	ret

000001fa <rfTxFifoStatus>:
}

// status about the TX FIFO status
uint8_t rfTxFifoStatus(void)
{
    uint8_t status = rfReadRegChar(FIFO_STATUS);
 1fa:	87 e1       	ldi	r24, 0x17	; 23
 1fc:	bf df       	rcall	.-130    	; 0x17c <rfReadRegChar>
    return (CHECK_BIT(status,TX_FULL));
}
 1fe:	80 72       	andi	r24, 0x20	; 32
 200:	08 95       	ret

00000202 <rfDisableGlobalDynamicAckPayload>:
}

// disable dynamic payload
void rfDisableGlobalDynamicAckPayload(void)
{
    rfWriteRegChar(FEATURE, CLEAR_BIT(rfReadRegChar(FEATURE), EN_DYN_ACK));
 202:	8d e1       	ldi	r24, 0x1D	; 29
 204:	bb df       	rcall	.-138    	; 0x17c <rfReadRegChar>
 206:	68 2f       	mov	r22, r24
 208:	6e 7f       	andi	r22, 0xFE	; 254
 20a:	8d e1       	ldi	r24, 0x1D	; 29
 20c:	92 df       	rcall	.-220    	; 0x132 <rfWriteRegChar>
}
 20e:	08 95       	ret

00000210 <rfEnableGlobalDynamicAckPayload>:
}

// enables dynamic payload
void rfEnableGlobalDynamicAckPayload(void)
{
    rfWriteRegChar(FEATURE, SET_BIT(rfReadRegChar(FEATURE), EN_DYN_ACK));
 210:	8d e1       	ldi	r24, 0x1D	; 29
 212:	b4 df       	rcall	.-152    	; 0x17c <rfReadRegChar>
 214:	68 2f       	mov	r22, r24
 216:	61 60       	ori	r22, 0x01	; 1
 218:	8d e1       	ldi	r24, 0x1D	; 29
 21a:	8b df       	rcall	.-234    	; 0x132 <rfWriteRegChar>
}
 21c:	08 95       	ret

0000021e <rfDisableGlobalAckPayload>:
}

// disable Ack payload
void rfDisableGlobalAckPayload(void)
{
    rfWriteRegChar(FEATURE, CLEAR_BIT(rfReadRegChar(FEATURE), EN_ACK_PAY));
 21e:	8d e1       	ldi	r24, 0x1D	; 29
 220:	ad df       	rcall	.-166    	; 0x17c <rfReadRegChar>
 222:	68 2f       	mov	r22, r24
 224:	6d 7f       	andi	r22, 0xFD	; 253
 226:	8d e1       	ldi	r24, 0x1D	; 29
 228:	84 df       	rcall	.-248    	; 0x132 <rfWriteRegChar>
}
 22a:	08 95       	ret

0000022c <rfEnableGlobalAckPayload>:
}

// enable Ack payload
void rfEnableGlobalAckPayload(void)
{
    rfWriteRegChar(FEATURE, SET_BIT(rfReadRegChar(FEATURE), EN_ACK_PAY));
 22c:	8d e1       	ldi	r24, 0x1D	; 29
 22e:	a6 df       	rcall	.-180    	; 0x17c <rfReadRegChar>
 230:	68 2f       	mov	r22, r24
 232:	62 60       	ori	r22, 0x02	; 2
 234:	8d e1       	ldi	r24, 0x1D	; 29
 236:	7d df       	rcall	.-262    	; 0x132 <rfWriteRegChar>
}
 238:	08 95       	ret

0000023a <rfDisableGlobalDynamicPayload>:
}

// enable dynamic payload
void rfDisableGlobalDynamicPayload(void)
{
    rfWriteRegChar(FEATURE, CLEAR_BIT(rfReadRegChar(FEATURE), EN_DPL));
 23a:	8d e1       	ldi	r24, 0x1D	; 29
 23c:	9f df       	rcall	.-194    	; 0x17c <rfReadRegChar>
 23e:	68 2f       	mov	r22, r24
 240:	6b 7f       	andi	r22, 0xFB	; 251
 242:	8d e1       	ldi	r24, 0x1D	; 29
 244:	76 df       	rcall	.-276    	; 0x132 <rfWriteRegChar>
}
 246:	08 95       	ret

00000248 <rfEnableGlobalDynamicPayload>:
}

// enable dynamic payload
void rfEnableGlobalDynamicPayload(void)
{
    rfWriteRegChar(FEATURE, SET_BIT(rfReadRegChar(FEATURE), EN_DPL));
 248:	8d e1       	ldi	r24, 0x1D	; 29
 24a:	98 df       	rcall	.-208    	; 0x17c <rfReadRegChar>
 24c:	68 2f       	mov	r22, r24
 24e:	64 60       	ori	r22, 0x04	; 4
 250:	8d e1       	ldi	r24, 0x1D	; 29
 252:	6f df       	rcall	.-290    	; 0x132 <rfWriteRegChar>
}
 254:	08 95       	ret

00000256 <rfClearDynamicPayloadForPipe>:
}

// enables dynamic payload for a pipe
void rfClearDynamicPayloadForPipe(uint8_t dymamic)
{
    if (DPL_P0 == dymamic)
 256:	88 23       	and	r24, r24
 258:	29 f4       	brne	.+10     	; 0x264 <rfClearDynamicPayloadForPipe+0xe>
    {
        rfWriteRegChar(DYNPD, CLEAR_BIT(rfReadRegChar(DYNPD), DPL_P0));
 25a:	8c e1       	ldi	r24, 0x1C	; 28
 25c:	8f df       	rcall	.-226    	; 0x17c <rfReadRegChar>
 25e:	68 2f       	mov	r22, r24
 260:	6e 7f       	andi	r22, 0xFE	; 254
 262:	1b c0       	rjmp	.+54     	; 0x29a <rfClearDynamicPayloadForPipe+0x44>
    }
    else if (DPL_P1 == dymamic)
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	29 f4       	brne	.+10     	; 0x272 <rfClearDynamicPayloadForPipe+0x1c>
    {
        rfWriteRegChar(DYNPD, CLEAR_BIT(rfReadRegChar(DYNPD), DPL_P1));
 268:	8c e1       	ldi	r24, 0x1C	; 28
 26a:	88 df       	rcall	.-240    	; 0x17c <rfReadRegChar>
 26c:	68 2f       	mov	r22, r24
 26e:	6d 7f       	andi	r22, 0xFD	; 253
 270:	14 c0       	rjmp	.+40     	; 0x29a <rfClearDynamicPayloadForPipe+0x44>
    }
    else if (DPL_P2 == dymamic)
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	29 f4       	brne	.+10     	; 0x280 <rfClearDynamicPayloadForPipe+0x2a>
    {
        rfWriteRegChar(DYNPD, CLEAR_BIT(rfReadRegChar(DYNPD), DPL_P2));
 276:	8c e1       	ldi	r24, 0x1C	; 28
 278:	81 df       	rcall	.-254    	; 0x17c <rfReadRegChar>
 27a:	68 2f       	mov	r22, r24
 27c:	6b 7f       	andi	r22, 0xFB	; 251
 27e:	0d c0       	rjmp	.+26     	; 0x29a <rfClearDynamicPayloadForPipe+0x44>
    }
    else if (DPL_P3 == dymamic)
 280:	83 30       	cpi	r24, 0x03	; 3
 282:	29 f4       	brne	.+10     	; 0x28e <rfClearDynamicPayloadForPipe+0x38>
    {
        rfWriteRegChar(DYNPD, CLEAR_BIT(rfReadRegChar(DYNPD), DPL_P3));
 284:	8c e1       	ldi	r24, 0x1C	; 28
 286:	7a df       	rcall	.-268    	; 0x17c <rfReadRegChar>
 288:	68 2f       	mov	r22, r24
 28a:	67 7f       	andi	r22, 0xF7	; 247
 28c:	06 c0       	rjmp	.+12     	; 0x29a <rfClearDynamicPayloadForPipe+0x44>
    }
    else if (DPL_P4 == dymamic)
 28e:	84 30       	cpi	r24, 0x04	; 4
 290:	39 f4       	brne	.+14     	; 0x2a0 <rfClearDynamicPayloadForPipe+0x4a>
    {
        rfWriteRegChar(DYNPD, CLEAR_BIT(rfReadRegChar(DYNPD), DPL_P4));
 292:	8c e1       	ldi	r24, 0x1C	; 28
 294:	73 df       	rcall	.-282    	; 0x17c <rfReadRegChar>
 296:	68 2f       	mov	r22, r24
 298:	6f 7e       	andi	r22, 0xEF	; 239
 29a:	8c e1       	ldi	r24, 0x1C	; 28
 29c:	4a df       	rcall	.-364    	; 0x132 <rfWriteRegChar>
 29e:	08 95       	ret
    }
    else if (DPL_P5 == dymamic)
 2a0:	85 30       	cpi	r24, 0x05	; 5
 2a2:	31 f4       	brne	.+12     	; 0x2b0 <rfClearDynamicPayloadForPipe+0x5a>
    {
        rfWriteRegChar(DYNPD, CLEAR_BIT(rfReadRegChar(DYNPD), DPL_P5));
 2a4:	8c e1       	ldi	r24, 0x1C	; 28
 2a6:	6a df       	rcall	.-300    	; 0x17c <rfReadRegChar>
 2a8:	68 2f       	mov	r22, r24
 2aa:	6f 7d       	andi	r22, 0xDF	; 223
 2ac:	8c e1       	ldi	r24, 0x1C	; 28
 2ae:	41 df       	rcall	.-382    	; 0x132 <rfWriteRegChar>
 2b0:	08 95       	ret

000002b2 <rfSetDynamicPayloadForPipe>:
}

// enables dynamic payload for a pipe
void rfSetDynamicPayloadForPipe(uint8_t dymamic)
{
    if (DPL_P0 == dymamic)
 2b2:	88 23       	and	r24, r24
 2b4:	29 f4       	brne	.+10     	; 0x2c0 <rfSetDynamicPayloadForPipe+0xe>
    {
        rfWriteRegChar(DYNPD, SET_BIT(rfReadRegChar(DYNPD), DPL_P0));
 2b6:	8c e1       	ldi	r24, 0x1C	; 28
 2b8:	61 df       	rcall	.-318    	; 0x17c <rfReadRegChar>
 2ba:	68 2f       	mov	r22, r24
 2bc:	61 60       	ori	r22, 0x01	; 1
 2be:	1b c0       	rjmp	.+54     	; 0x2f6 <rfSetDynamicPayloadForPipe+0x44>
    }
    else if (DPL_P1 == dymamic)
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	29 f4       	brne	.+10     	; 0x2ce <rfSetDynamicPayloadForPipe+0x1c>
    {
        rfWriteRegChar(DYNPD, SET_BIT(rfReadRegChar(DYNPD), DPL_P1));
 2c4:	8c e1       	ldi	r24, 0x1C	; 28
 2c6:	5a df       	rcall	.-332    	; 0x17c <rfReadRegChar>
 2c8:	68 2f       	mov	r22, r24
 2ca:	62 60       	ori	r22, 0x02	; 2
 2cc:	14 c0       	rjmp	.+40     	; 0x2f6 <rfSetDynamicPayloadForPipe+0x44>
    }
    else if (DPL_P2 == dymamic)
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	29 f4       	brne	.+10     	; 0x2dc <rfSetDynamicPayloadForPipe+0x2a>
    {
        rfWriteRegChar(DYNPD, SET_BIT(rfReadRegChar(DYNPD), DPL_P2));
 2d2:	8c e1       	ldi	r24, 0x1C	; 28
 2d4:	53 df       	rcall	.-346    	; 0x17c <rfReadRegChar>
 2d6:	68 2f       	mov	r22, r24
 2d8:	64 60       	ori	r22, 0x04	; 4
 2da:	0d c0       	rjmp	.+26     	; 0x2f6 <rfSetDynamicPayloadForPipe+0x44>
    }
    else if (DPL_P3 == dymamic)
 2dc:	83 30       	cpi	r24, 0x03	; 3
 2de:	29 f4       	brne	.+10     	; 0x2ea <rfSetDynamicPayloadForPipe+0x38>
    {
        rfWriteRegChar(DYNPD, SET_BIT(rfReadRegChar(DYNPD), DPL_P3));
 2e0:	8c e1       	ldi	r24, 0x1C	; 28
 2e2:	4c df       	rcall	.-360    	; 0x17c <rfReadRegChar>
 2e4:	68 2f       	mov	r22, r24
 2e6:	68 60       	ori	r22, 0x08	; 8
 2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <rfSetDynamicPayloadForPipe+0x44>
    }
    else if (DPL_P4 == dymamic)
 2ea:	84 30       	cpi	r24, 0x04	; 4
 2ec:	39 f4       	brne	.+14     	; 0x2fc <rfSetDynamicPayloadForPipe+0x4a>
    {
        rfWriteRegChar(DYNPD, SET_BIT(rfReadRegChar(DYNPD), DPL_P4));
 2ee:	8c e1       	ldi	r24, 0x1C	; 28
 2f0:	45 df       	rcall	.-374    	; 0x17c <rfReadRegChar>
 2f2:	68 2f       	mov	r22, r24
 2f4:	60 61       	ori	r22, 0x10	; 16
 2f6:	8c e1       	ldi	r24, 0x1C	; 28
 2f8:	1c df       	rcall	.-456    	; 0x132 <rfWriteRegChar>
 2fa:	08 95       	ret
    }
    else if (DPL_P5 == dymamic)
 2fc:	85 30       	cpi	r24, 0x05	; 5
 2fe:	31 f4       	brne	.+12     	; 0x30c <rfSetDynamicPayloadForPipe+0x5a>
    {
        rfWriteRegChar(DYNPD, SET_BIT(rfReadRegChar(DYNPD), DPL_P5));
 300:	8c e1       	ldi	r24, 0x1C	; 28
 302:	3c df       	rcall	.-392    	; 0x17c <rfReadRegChar>
 304:	68 2f       	mov	r22, r24
 306:	60 62       	ori	r22, 0x20	; 32
 308:	8c e1       	ldi	r24, 0x1C	; 28
 30a:	13 df       	rcall	.-474    	; 0x132 <rfWriteRegChar>
 30c:	08 95       	ret

0000030e <rfReadChannelPower>:
}

// reads the channel power
uint8_t rfReadChannelPower(void)
{
    return rfReadRegChar(RPD);
 30e:	89 e0       	ldi	r24, 0x09	; 9
 310:	35 df       	rcall	.-406    	; 0x17c <rfReadRegChar>
}
 312:	08 95       	ret

00000314 <rfTransmitCarrier>:
}

// make the channel busy by transmitting carrier wave
void rfTransmitCarrier(void)
{
    rfWriteRegChar(RF_SETUP, SET_BIT(rfReadRegChar(RF_SETUP), CONT_WAVE));
 314:	86 e0       	ldi	r24, 0x06	; 6
 316:	32 df       	rcall	.-412    	; 0x17c <rfReadRegChar>
 318:	68 2f       	mov	r22, r24
 31a:	60 68       	ori	r22, 0x80	; 128
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	09 df       	rcall	.-494    	; 0x132 <rfWriteRegChar>
}
 320:	08 95       	ret

00000322 <rfSetRetryDelay>:
    rfWriteRegChar(SETUP_RETR, SET_VALUE(rfReadRegChar(SETUP_RETR), attempts));
}

// sets the retransmit delays
void rfSetRetryDelay(uint8_t delay)
{
 322:	1f 93       	push	r17
 324:	18 2f       	mov	r17, r24
    // check for bounds
    rfWriteRegChar(SETUP_RETR, SET_VALUE(rfReadRegChar(SETUP_RETR), (delay<<4)));
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	29 df       	rcall	.-430    	; 0x17c <rfReadRegChar>
 32a:	12 95       	swap	r17
 32c:	10 7f       	andi	r17, 0xF0	; 240
 32e:	18 2b       	or	r17, r24
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	61 2f       	mov	r22, r17
 334:	fe de       	rcall	.-516    	; 0x132 <rfWriteRegChar>
}
 336:	1f 91       	pop	r17
 338:	08 95       	ret

0000033a <rfSetRetryAttempts>:
    }
}

// set number of retries
void rfSetRetryAttempts(uint8_t attempts)
{
 33a:	1f 93       	push	r17
 33c:	18 2f       	mov	r17, r24
    // check for bounds
    rfWriteRegChar(SETUP_RETR, SET_VALUE(rfReadRegChar(SETUP_RETR), attempts));
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	1d df       	rcall	.-454    	; 0x17c <rfReadRegChar>
 342:	18 2b       	or	r17, r24
 344:	84 e0       	ldi	r24, 0x04	; 4
 346:	61 2f       	mov	r22, r17
 348:	f4 de       	rcall	.-536    	; 0x132 <rfWriteRegChar>
}
 34a:	1f 91       	pop	r17
 34c:	08 95       	ret

0000034e <rfDisablePipeForRx>:
}

// disable an address pipe
void rfDisablePipeForRx(uint8_t pipeAddress)
{
    if (ERX_P0 == pipeAddress)
 34e:	88 23       	and	r24, r24
 350:	29 f4       	brne	.+10     	; 0x35c <rfDisablePipeForRx+0xe>
    {
        rfWriteRegChar(EN_RXADDR, CLEAR_BIT(rfReadRegChar(EN_RXADDR), ERX_P0));
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	13 df       	rcall	.-474    	; 0x17c <rfReadRegChar>
 356:	68 2f       	mov	r22, r24
 358:	6e 7f       	andi	r22, 0xFE	; 254
 35a:	1a c0       	rjmp	.+52     	; 0x390 <rfDisablePipeForRx+0x42>
    }
    else if (ERX_P1 == pipeAddress)
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	29 f4       	brne	.+10     	; 0x36a <rfDisablePipeForRx+0x1c>
    {
        rfWriteRegChar(EN_RXADDR, CLEAR_BIT(rfReadRegChar(EN_RXADDR), ERX_P1));
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	0c df       	rcall	.-488    	; 0x17c <rfReadRegChar>
 364:	68 2f       	mov	r22, r24
 366:	6d 7f       	andi	r22, 0xFD	; 253
 368:	13 c0       	rjmp	.+38     	; 0x390 <rfDisablePipeForRx+0x42>
    }
    else if (ERX_P2 == pipeAddress)
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	21 f4       	brne	.+8      	; 0x376 <rfDisablePipeForRx+0x28>
    {
        rfWriteRegChar(EN_RXADDR, CLEAR_BIT(rfReadRegChar(EN_RXADDR), ERX_P2));
 36e:	06 df       	rcall	.-500    	; 0x17c <rfReadRegChar>
 370:	68 2f       	mov	r22, r24
 372:	6b 7f       	andi	r22, 0xFB	; 251
 374:	0d c0       	rjmp	.+26     	; 0x390 <rfDisablePipeForRx+0x42>
    }
    else if (ERX_P3 == pipeAddress)
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	29 f4       	brne	.+10     	; 0x384 <rfDisablePipeForRx+0x36>
    {
        rfWriteRegChar(EN_RXADDR, CLEAR_BIT(rfReadRegChar(EN_RXADDR), ERX_P3));
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	ff de       	rcall	.-514    	; 0x17c <rfReadRegChar>
 37e:	68 2f       	mov	r22, r24
 380:	67 7f       	andi	r22, 0xF7	; 247
 382:	06 c0       	rjmp	.+12     	; 0x390 <rfDisablePipeForRx+0x42>
    }
    else if (ERX_P4 == pipeAddress)
 384:	84 30       	cpi	r24, 0x04	; 4
 386:	39 f4       	brne	.+14     	; 0x396 <rfDisablePipeForRx+0x48>
    {
        rfWriteRegChar(EN_RXADDR, CLEAR_BIT(rfReadRegChar(EN_RXADDR), ERX_P4));
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	f8 de       	rcall	.-528    	; 0x17c <rfReadRegChar>
 38c:	68 2f       	mov	r22, r24
 38e:	6f 7e       	andi	r22, 0xEF	; 239
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	cf de       	rcall	.-610    	; 0x132 <rfWriteRegChar>
 394:	08 95       	ret
    }
    else if (ERX_P5 == pipeAddress)
 396:	85 30       	cpi	r24, 0x05	; 5
 398:	31 f4       	brne	.+12     	; 0x3a6 <rfDisablePipeForRx+0x58>
    {
        rfWriteRegChar(EN_RXADDR, CLEAR_BIT(rfReadRegChar(EN_RXADDR), ERX_P5));
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	ef de       	rcall	.-546    	; 0x17c <rfReadRegChar>
 39e:	68 2f       	mov	r22, r24
 3a0:	6f 7d       	andi	r22, 0xDF	; 223
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	c6 de       	rcall	.-628    	; 0x132 <rfWriteRegChar>
 3a6:	08 95       	ret

000003a8 <rfEnablePipeForRx>:
}

// enables an address pipe
void rfEnablePipeForRx(uint8_t pipeAddress)
{
    if (ERX_P0 == pipeAddress)
 3a8:	88 23       	and	r24, r24
 3aa:	29 f4       	brne	.+10     	; 0x3b6 <rfEnablePipeForRx+0xe>
    {
        rfWriteRegChar(EN_RXADDR, SET_BIT(rfReadRegChar(EN_RXADDR), ERX_P0));
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	e6 de       	rcall	.-564    	; 0x17c <rfReadRegChar>
 3b0:	68 2f       	mov	r22, r24
 3b2:	61 60       	ori	r22, 0x01	; 1
 3b4:	1a c0       	rjmp	.+52     	; 0x3ea <rfEnablePipeForRx+0x42>
    }
    else if (ERX_P1 == pipeAddress)
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	29 f4       	brne	.+10     	; 0x3c4 <rfEnablePipeForRx+0x1c>
    {
        rfWriteRegChar(EN_RXADDR, SET_BIT(rfReadRegChar(EN_RXADDR), ERX_P1));
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	df de       	rcall	.-578    	; 0x17c <rfReadRegChar>
 3be:	68 2f       	mov	r22, r24
 3c0:	62 60       	ori	r22, 0x02	; 2
 3c2:	13 c0       	rjmp	.+38     	; 0x3ea <rfEnablePipeForRx+0x42>
    }
    else if (ERX_P2 == pipeAddress)
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	21 f4       	brne	.+8      	; 0x3d0 <rfEnablePipeForRx+0x28>
    {
        rfWriteRegChar(EN_RXADDR, SET_BIT(rfReadRegChar(EN_RXADDR), ERX_P2));
 3c8:	d9 de       	rcall	.-590    	; 0x17c <rfReadRegChar>
 3ca:	68 2f       	mov	r22, r24
 3cc:	64 60       	ori	r22, 0x04	; 4
 3ce:	0d c0       	rjmp	.+26     	; 0x3ea <rfEnablePipeForRx+0x42>
    }
    else if (ERX_P3 == pipeAddress)
 3d0:	83 30       	cpi	r24, 0x03	; 3
 3d2:	29 f4       	brne	.+10     	; 0x3de <rfEnablePipeForRx+0x36>
    {
        rfWriteRegChar(EN_RXADDR, SET_BIT(rfReadRegChar(EN_RXADDR), ERX_P3));
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	d2 de       	rcall	.-604    	; 0x17c <rfReadRegChar>
 3d8:	68 2f       	mov	r22, r24
 3da:	68 60       	ori	r22, 0x08	; 8
 3dc:	06 c0       	rjmp	.+12     	; 0x3ea <rfEnablePipeForRx+0x42>
    }
    else if (ERX_P4 == pipeAddress)
 3de:	84 30       	cpi	r24, 0x04	; 4
 3e0:	39 f4       	brne	.+14     	; 0x3f0 <rfEnablePipeForRx+0x48>
    {
        rfWriteRegChar(EN_RXADDR, SET_BIT(rfReadRegChar(EN_RXADDR), ERX_P4));
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	cb de       	rcall	.-618    	; 0x17c <rfReadRegChar>
 3e6:	68 2f       	mov	r22, r24
 3e8:	60 61       	ori	r22, 0x10	; 16
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	a2 de       	rcall	.-700    	; 0x132 <rfWriteRegChar>
 3ee:	08 95       	ret
    }
    else if (ERX_P5 == pipeAddress)
 3f0:	85 30       	cpi	r24, 0x05	; 5
 3f2:	31 f4       	brne	.+12     	; 0x400 <rfEnablePipeForRx+0x58>
    {
        rfWriteRegChar(EN_RXADDR, SET_BIT(rfReadRegChar(EN_RXADDR), ERX_P5));
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	c2 de       	rcall	.-636    	; 0x17c <rfReadRegChar>
 3f8:	68 2f       	mov	r22, r24
 3fa:	60 62       	ori	r22, 0x20	; 32
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	99 de       	rcall	.-718    	; 0x132 <rfWriteRegChar>
 400:	08 95       	ret

00000402 <rfClearAutoAckForPipe>:
}

// Clears autoack on a pipe
void rfClearAutoAckForPipe(uint8_t pipeAddress)
{
    if (ENAA_P0 == pipeAddress)
 402:	88 23       	and	r24, r24
 404:	29 f4       	brne	.+10     	; 0x410 <rfClearAutoAckForPipe+0xe>
    {
        rfWriteRegChar(EN_AA, CLEAR_BIT(rfReadRegChar(EN_AA), ENAA_P0));
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	b9 de       	rcall	.-654    	; 0x17c <rfReadRegChar>
 40a:	68 2f       	mov	r22, r24
 40c:	6e 7f       	andi	r22, 0xFE	; 254
 40e:	1a c0       	rjmp	.+52     	; 0x444 <rfClearAutoAckForPipe+0x42>
    }
    else if (ENAA_P1 == pipeAddress)
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	21 f4       	brne	.+8      	; 0x41c <rfClearAutoAckForPipe+0x1a>
    {
        rfWriteRegChar(EN_AA, CLEAR_BIT(rfReadRegChar(EN_AA), ENAA_P1));
 414:	b3 de       	rcall	.-666    	; 0x17c <rfReadRegChar>
 416:	68 2f       	mov	r22, r24
 418:	6d 7f       	andi	r22, 0xFD	; 253
 41a:	14 c0       	rjmp	.+40     	; 0x444 <rfClearAutoAckForPipe+0x42>
    }
    else if (ENAA_P2 == pipeAddress)
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	29 f4       	brne	.+10     	; 0x42a <rfClearAutoAckForPipe+0x28>
    {
        rfWriteRegChar(EN_AA, CLEAR_BIT(rfReadRegChar(EN_AA), ENAA_P2));
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	ac de       	rcall	.-680    	; 0x17c <rfReadRegChar>
 424:	68 2f       	mov	r22, r24
 426:	6b 7f       	andi	r22, 0xFB	; 251
 428:	0d c0       	rjmp	.+26     	; 0x444 <rfClearAutoAckForPipe+0x42>
    }
    else if (ENAA_P3 == pipeAddress)
 42a:	83 30       	cpi	r24, 0x03	; 3
 42c:	29 f4       	brne	.+10     	; 0x438 <rfClearAutoAckForPipe+0x36>
    {
        rfWriteRegChar(EN_AA, CLEAR_BIT(rfReadRegChar(EN_AA), ENAA_P3));
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	a5 de       	rcall	.-694    	; 0x17c <rfReadRegChar>
 432:	68 2f       	mov	r22, r24
 434:	67 7f       	andi	r22, 0xF7	; 247
 436:	06 c0       	rjmp	.+12     	; 0x444 <rfClearAutoAckForPipe+0x42>
    }
    else if (ENAA_P4 == pipeAddress)
 438:	84 30       	cpi	r24, 0x04	; 4
 43a:	39 f4       	brne	.+14     	; 0x44a <rfClearAutoAckForPipe+0x48>
    {
        rfWriteRegChar(EN_AA, CLEAR_BIT(rfReadRegChar(EN_AA), ENAA_P4));
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	9e de       	rcall	.-708    	; 0x17c <rfReadRegChar>
 440:	68 2f       	mov	r22, r24
 442:	6f 7e       	andi	r22, 0xEF	; 239
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	75 de       	rcall	.-790    	; 0x132 <rfWriteRegChar>
 448:	08 95       	ret
    }
    else if (ENAA_P5 == pipeAddress)
 44a:	85 30       	cpi	r24, 0x05	; 5
 44c:	31 f4       	brne	.+12     	; 0x45a <rfClearAutoAckForPipe+0x58>
    {
        rfWriteRegChar(EN_AA, CLEAR_BIT(rfReadRegChar(EN_AA), ENAA_P5));
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	95 de       	rcall	.-726    	; 0x17c <rfReadRegChar>
 452:	68 2f       	mov	r22, r24
 454:	6f 7d       	andi	r22, 0xDF	; 223
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	6c de       	rcall	.-808    	; 0x132 <rfWriteRegChar>
 45a:	08 95       	ret

0000045c <rfSetAutoAckForPipe>:
}

// sets AutoAck on a pipe
void rfSetAutoAckForPipe(uint8_t pipeAddress)
{
    if (ENAA_P0 == pipeAddress)
 45c:	88 23       	and	r24, r24
 45e:	29 f4       	brne	.+10     	; 0x46a <__stack+0xb>
    {
        rfWriteRegChar(EN_AA, SET_BIT(rfReadRegChar(EN_AA), ENAA_P0));
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	8c de       	rcall	.-744    	; 0x17c <rfReadRegChar>
 464:	68 2f       	mov	r22, r24
 466:	61 60       	ori	r22, 0x01	; 1
 468:	1a c0       	rjmp	.+52     	; 0x49e <__stack+0x3f>
    }
    else if (ENAA_P1 == pipeAddress)
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	21 f4       	brne	.+8      	; 0x476 <__stack+0x17>
    {
        rfWriteRegChar(EN_AA, SET_BIT(rfReadRegChar(EN_AA), ENAA_P1));
 46e:	86 de       	rcall	.-756    	; 0x17c <rfReadRegChar>
 470:	68 2f       	mov	r22, r24
 472:	62 60       	ori	r22, 0x02	; 2
 474:	14 c0       	rjmp	.+40     	; 0x49e <__stack+0x3f>
    }
    else if (ENAA_P2 == pipeAddress)
 476:	82 30       	cpi	r24, 0x02	; 2
 478:	29 f4       	brne	.+10     	; 0x484 <__stack+0x25>
    {
        rfWriteRegChar(EN_AA, SET_BIT(rfReadRegChar(EN_AA), ENAA_P2));
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	7f de       	rcall	.-770    	; 0x17c <rfReadRegChar>
 47e:	68 2f       	mov	r22, r24
 480:	64 60       	ori	r22, 0x04	; 4
 482:	0d c0       	rjmp	.+26     	; 0x49e <__stack+0x3f>
    }
    else if (ENAA_P3 == pipeAddress)
 484:	83 30       	cpi	r24, 0x03	; 3
 486:	29 f4       	brne	.+10     	; 0x492 <__stack+0x33>
    {
        rfWriteRegChar(EN_AA, SET_BIT(rfReadRegChar(EN_AA), ENAA_P3));
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	78 de       	rcall	.-784    	; 0x17c <rfReadRegChar>
 48c:	68 2f       	mov	r22, r24
 48e:	68 60       	ori	r22, 0x08	; 8
 490:	06 c0       	rjmp	.+12     	; 0x49e <__stack+0x3f>
    }
    else if (ENAA_P4 == pipeAddress)
 492:	84 30       	cpi	r24, 0x04	; 4
 494:	39 f4       	brne	.+14     	; 0x4a4 <__stack+0x45>
    {
        rfWriteRegChar(EN_AA, SET_BIT(rfReadRegChar(EN_AA), ENAA_P4));
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	71 de       	rcall	.-798    	; 0x17c <rfReadRegChar>
 49a:	68 2f       	mov	r22, r24
 49c:	60 61       	ori	r22, 0x10	; 16
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	48 de       	rcall	.-880    	; 0x132 <rfWriteRegChar>
 4a2:	08 95       	ret
    }
    else if (ENAA_P5 == pipeAddress)
 4a4:	85 30       	cpi	r24, 0x05	; 5
 4a6:	31 f4       	brne	.+12     	; 0x4b4 <__stack+0x55>
    {
        rfWriteRegChar(EN_AA, SET_BIT(rfReadRegChar(EN_AA), ENAA_P5));
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	68 de       	rcall	.-816    	; 0x17c <rfReadRegChar>
 4ac:	68 2f       	mov	r22, r24
 4ae:	60 62       	ori	r22, 0x20	; 32
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	3f de       	rcall	.-898    	; 0x132 <rfWriteRegChar>
 4b4:	08 95       	ret

000004b6 <rfSetToReceiveMode>:
}

// sets the radio to receive mode
void rfSetToReceiveMode(void)
{
    CE_LOW;
 4b6:	c6 98       	cbi	0x18, 6	; 24
    rfWriteRegChar(CONFIG, SET_BIT(rfReadRegChar(CONFIG), PRIM_RX));
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	60 de       	rcall	.-832    	; 0x17c <rfReadRegChar>
 4bc:	68 2f       	mov	r22, r24
 4be:	61 60       	ori	r22, 0x01	; 1
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	37 de       	rcall	.-914    	; 0x132 <rfWriteRegChar>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4c4:	84 e0       	ldi	r24, 0x04	; 4
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <rfSetToReceiveMode+0x12>
    _delay_us(130);
    CE_HIGH;
 4cc:	c6 9a       	sbi	0x18, 6	; 24
}
 4ce:	08 95       	ret

000004d0 <rfSetToTransmitMode>:
}

// sets the radio to transmit mode
void rfSetToTransmitMode(void)
{
    CE_LOW;
 4d0:	c6 98       	cbi	0x18, 6	; 24
    rfWriteRegChar(CONFIG, CLEAR_BIT(rfReadRegChar(CONFIG), PRIM_RX));
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	53 de       	rcall	.-858    	; 0x17c <rfReadRegChar>
 4d6:	68 2f       	mov	r22, r24
 4d8:	6e 7f       	andi	r22, 0xFE	; 254
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	2a de       	rcall	.-940    	; 0x132 <rfWriteRegChar>
 4de:	84 e0       	ldi	r24, 0x04	; 4
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <rfSetToTransmitMode+0x12>
    _delay_us(130);
}
 4e6:	08 95       	ret

000004e8 <rfClearInterruptMask>:
}

// clears interrupt mask
void rfClearInterruptMask(uint8_t mask)
{
    if (MASK_RX_DR == mask)
 4e8:	86 30       	cpi	r24, 0x06	; 6
 4ea:	29 f4       	brne	.+10     	; 0x4f6 <rfClearInterruptMask+0xe>
    {
        rfWriteRegChar(CONFIG, CLEAR_BIT(rfReadRegChar(CONFIG), MASK_RX_DR));
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	46 de       	rcall	.-884    	; 0x17c <rfReadRegChar>
 4f0:	68 2f       	mov	r22, r24
 4f2:	6f 7b       	andi	r22, 0xBF	; 191
 4f4:	06 c0       	rjmp	.+12     	; 0x502 <rfClearInterruptMask+0x1a>
    }
    else if (MASK_TX_DS == mask)
 4f6:	85 30       	cpi	r24, 0x05	; 5
 4f8:	39 f4       	brne	.+14     	; 0x508 <rfClearInterruptMask+0x20>
    {
        rfWriteRegChar(CONFIG, CLEAR_BIT(rfReadRegChar(CONFIG), MASK_TX_DS));
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	3f de       	rcall	.-898    	; 0x17c <rfReadRegChar>
 4fe:	68 2f       	mov	r22, r24
 500:	6f 7d       	andi	r22, 0xDF	; 223
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	16 de       	rcall	.-980    	; 0x132 <rfWriteRegChar>
 506:	08 95       	ret
    }
    else if (MASK_MAX_RT == mask)
 508:	84 30       	cpi	r24, 0x04	; 4
 50a:	31 f4       	brne	.+12     	; 0x518 <rfClearInterruptMask+0x30>
    {
        rfWriteRegChar(CONFIG, CLEAR_BIT(rfReadRegChar(CONFIG), MASK_MAX_RT));
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	36 de       	rcall	.-916    	; 0x17c <rfReadRegChar>
 510:	68 2f       	mov	r22, r24
 512:	6f 7e       	andi	r22, 0xEF	; 239
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	0d de       	rcall	.-998    	; 0x132 <rfWriteRegChar>
 518:	08 95       	ret

0000051a <rfSetInterruptMask>:
}

// sets interrupt mask
void rfSetInterruptMask(uint8_t mask)
{
    if (MASK_RX_DR == mask)
 51a:	86 30       	cpi	r24, 0x06	; 6
 51c:	29 f4       	brne	.+10     	; 0x528 <rfSetInterruptMask+0xe>
    {
        rfWriteRegChar(CONFIG, SET_BIT(rfReadRegChar(CONFIG), MASK_RX_DR));
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	2d de       	rcall	.-934    	; 0x17c <rfReadRegChar>
 522:	68 2f       	mov	r22, r24
 524:	60 64       	ori	r22, 0x40	; 64
 526:	06 c0       	rjmp	.+12     	; 0x534 <rfSetInterruptMask+0x1a>
    }
    else if (MASK_TX_DS == mask)
 528:	85 30       	cpi	r24, 0x05	; 5
 52a:	39 f4       	brne	.+14     	; 0x53a <rfSetInterruptMask+0x20>
    {
        rfWriteRegChar(CONFIG, SET_BIT(rfReadRegChar(CONFIG), MASK_TX_DS));
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	26 de       	rcall	.-948    	; 0x17c <rfReadRegChar>
 530:	68 2f       	mov	r22, r24
 532:	60 62       	ori	r22, 0x20	; 32
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	fd dd       	rcall	.-1030   	; 0x132 <rfWriteRegChar>
 538:	08 95       	ret
    }
    else if (MASK_MAX_RT == mask)
 53a:	84 30       	cpi	r24, 0x04	; 4
 53c:	31 f4       	brne	.+12     	; 0x54a <rfSetInterruptMask+0x30>
    {
        rfWriteRegChar(CONFIG, SET_BIT(rfReadRegChar(CONFIG), MASK_MAX_RT));
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	1d de       	rcall	.-966    	; 0x17c <rfReadRegChar>
 542:	68 2f       	mov	r22, r24
 544:	60 61       	ori	r22, 0x10	; 16
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	f4 dd       	rcall	.-1048   	; 0x132 <rfWriteRegChar>
 54a:	08 95       	ret

0000054c <rfSetCrcScheme>:
}

// sets the number of crc bytes
void rfSetCrcScheme(uint8_t scheme)
{
    if (scheme)
 54c:	88 23       	and	r24, r24
 54e:	31 f0       	breq	.+12     	; 0x55c <rfSetCrcScheme+0x10>
    {
        rfWriteRegChar(CONFIG, SET_BIT(rfReadRegChar(CONFIG), CRCO));
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	14 de       	rcall	.-984    	; 0x17c <rfReadRegChar>
 554:	68 2f       	mov	r22, r24
 556:	64 60       	ori	r22, 0x04	; 4
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	eb dd       	rcall	.-1066   	; 0x132 <rfWriteRegChar>
 55c:	08 95       	ret

0000055e <rfDisableCRC>:
 * \return NonReturning
 *
 */
void rfDisableCRC(void)
{
    rfWriteRegChar(CONFIG, CLEAR_BIT(rfReadRegChar(CONFIG), EN_CRC));
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	0d de       	rcall	.-998    	; 0x17c <rfReadRegChar>
 562:	68 2f       	mov	r22, r24
 564:	67 7f       	andi	r22, 0xF7	; 247
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	e4 dd       	rcall	.-1080   	; 0x132 <rfWriteRegChar>
}
 56a:	08 95       	ret

0000056c <rfEnableCRC>:
 * \return NonReturning
 *
 */
void rfEnableCRC(void)
{
    rfWriteRegChar(CONFIG, SET_BIT(rfReadRegChar(CONFIG), EN_CRC));
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	06 de       	rcall	.-1012   	; 0x17c <rfReadRegChar>
 570:	68 2f       	mov	r22, r24
 572:	68 60       	ori	r22, 0x08	; 8
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	dd dd       	rcall	.-1094   	; 0x132 <rfWriteRegChar>
}
 578:	08 95       	ret

0000057a <rfSetAddressWidth>:
    rfWriteRegChar(RF_SETUP, SET_VALUE(rfReadRegChar(RF_SETUP), (((1<<3) & dataRate)<<3) | ((1<<5) & dataRate<<5)));
}

// sets receive address width
void rfSetAddressWidth(uint8_t addressWidth)
{
 57a:	1f 93       	push	r17
 57c:	18 2f       	mov	r17, r24
    // check bounds
    rfWriteRegChar(SETUP_AW, SET_VALUE(rfReadRegChar(SETUP_AW), addressWidth));
 57e:	83 e0       	ldi	r24, 0x03	; 3
 580:	fd dd       	rcall	.-1030   	; 0x17c <rfReadRegChar>
 582:	18 2b       	or	r17, r24
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	61 2f       	mov	r22, r17
 588:	d4 dd       	rcall	.-1112   	; 0x132 <rfWriteRegChar>
}
 58a:	1f 91       	pop	r17
 58c:	08 95       	ret

0000058e <rfSetDataRate>:
    rfWriteRegChar(RF_SETUP, SET_VALUE(rfReadRegChar(RF_SETUP), (power<<1)));
}

// sets the transmit data-rate
void rfSetDataRate(uint8_t dataRate)
{
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	08 2f       	mov	r16, r24
    // check bounds
    rfWriteRegChar(RF_SETUP, SET_VALUE(rfReadRegChar(RF_SETUP), (((1<<3) & dataRate)<<3) | ((1<<5) & dataRate<<5)));
 594:	86 e0       	ldi	r24, 0x06	; 6
 596:	f2 dd       	rcall	.-1052   	; 0x17c <rfReadRegChar>
 598:	10 e0       	ldi	r17, 0x00	; 0
 59a:	98 01       	movw	r18, r16
 59c:	28 70       	andi	r18, 0x08	; 8
 59e:	30 70       	andi	r19, 0x00	; 0
 5a0:	43 e0       	ldi	r20, 0x03	; 3
 5a2:	22 0f       	add	r18, r18
 5a4:	33 1f       	adc	r19, r19
 5a6:	4a 95       	dec	r20
 5a8:	e1 f7       	brne	.-8      	; 0x5a2 <rfSetDataRate+0x14>
 5aa:	95 e0       	ldi	r25, 0x05	; 5
 5ac:	00 0f       	add	r16, r16
 5ae:	11 1f       	adc	r17, r17
 5b0:	9a 95       	dec	r25
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <rfSetDataRate+0x1e>
 5b4:	00 72       	andi	r16, 0x20	; 32
 5b6:	02 2b       	or	r16, r18
 5b8:	08 2b       	or	r16, r24
 5ba:	86 e0       	ldi	r24, 0x06	; 6
 5bc:	60 2f       	mov	r22, r16
 5be:	b9 dd       	rcall	.-1166   	; 0x132 <rfWriteRegChar>
}
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	08 95       	ret

000005c6 <rfSetTransmitPower>:
    rfWriteRegChar(RF_CH, SET_VALUE(rfReadRegChar(RF_CH), channel));
}

// sets the transmit power
void rfSetTransmitPower(uint8_t power)
{
 5c6:	1f 93       	push	r17
 5c8:	18 2f       	mov	r17, r24
    // check bounds
    rfWriteRegChar(RF_SETUP, SET_VALUE(rfReadRegChar(RF_SETUP), (power<<1)));
 5ca:	86 e0       	ldi	r24, 0x06	; 6
 5cc:	d7 dd       	rcall	.-1106   	; 0x17c <rfReadRegChar>
 5ce:	11 0f       	add	r17, r17
 5d0:	18 2b       	or	r17, r24
 5d2:	86 e0       	ldi	r24, 0x06	; 6
 5d4:	61 2f       	mov	r22, r17
 5d6:	ad dd       	rcall	.-1190   	; 0x132 <rfWriteRegChar>
}
 5d8:	1f 91       	pop	r17
 5da:	08 95       	ret

000005dc <rfSetChannel>:
    return status;
}

// sets the radio frequency
void rfSetChannel(uint8_t channel)
{
 5dc:	1f 93       	push	r17
 5de:	18 2f       	mov	r17, r24
    // check bounds
    rfWriteRegChar(RF_CH, SET_VALUE(rfReadRegChar(RF_CH), channel));
 5e0:	85 e0       	ldi	r24, 0x05	; 5
 5e2:	cc dd       	rcall	.-1128   	; 0x17c <rfReadRegChar>
 5e4:	18 2b       	or	r17, r24
 5e6:	85 e0       	ldi	r24, 0x05	; 5
 5e8:	61 2f       	mov	r22, r17
 5ea:	a3 dd       	rcall	.-1210   	; 0x132 <rfWriteRegChar>
}
 5ec:	1f 91       	pop	r17
 5ee:	08 95       	ret

000005f0 <rfToPowerDown>:
}

// changes the state of the transceiver to powerDown mode
void rfToPowerDown(void)
{
    rfWriteRegChar(CONFIG, CLEAR_BIT(rfReadRegChar(CONFIG), PWR_UP));
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	c4 dd       	rcall	.-1144   	; 0x17c <rfReadRegChar>
 5f4:	68 2f       	mov	r22, r24
 5f6:	6d 7f       	andi	r22, 0xFD	; 253
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	9b dd       	rcall	.-1226   	; 0x132 <rfWriteRegChar>
    CE_LOW;
 5fc:	c6 98       	cbi	0x18, 6	; 24
}
 5fe:	08 95       	ret

00000600 <rfToStandbyOne>:
}

// changes the state of the transceiver to standby mode one
void rfToStandbyOne(void)
{
    rfWriteRegChar(CONFIG, SET_BIT(rfReadRegChar(CONFIG), PWR_UP));
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	bc dd       	rcall	.-1160   	; 0x17c <rfReadRegChar>
 604:	68 2f       	mov	r22, r24
 606:	62 60       	ori	r22, 0x02	; 2
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	93 dd       	rcall	.-1242   	; 0x132 <rfWriteRegChar>
    CE_LOW;
 60c:	c6 98       	cbi	0x18, 6	; 24
 60e:	80 ed       	ldi	r24, 0xD0	; 208
 610:	97 e0       	ldi	r25, 0x07	; 7
 612:	28 ec       	ldi	r18, 0xC8	; 200
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	f9 01       	movw	r30, r18
 618:	31 97       	sbiw	r30, 0x01	; 1
 61a:	f1 f7       	brne	.-4      	; 0x618 <rfToStandbyOne+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 61c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 61e:	d9 f7       	brne	.-10     	; 0x616 <rfToStandbyOne+0x16>

    _delay_ms(200);
}
 620:	08 95       	ret

00000622 <rfStartListening>:
}

// continuously listens
void rfStartListening(void)
{
    rfToStandbyOne();
 622:	ee df       	rcall	.-36     	; 0x600 <rfToStandbyOne>
    rfSetToReceiveMode();
 624:	48 df       	rcall	.-368    	; 0x4b6 <rfSetToReceiveMode>
}
 626:	08 95       	ret

00000628 <rfTransmit>:
volatile uint8_t rfBuffer[32];
volatile uint8_t *rfPtrBuffer = rfBuffer;

// handles the transmission of rfPacket
void rfTransmit(uint8_t* buff, uint8_t len)
{
 628:	ff 92       	push	r15
 62a:	0f 93       	push	r16
 62c:	1f 93       	push	r17
 62e:	8c 01       	movw	r16, r24
 630:	f6 2e       	mov	r15, r22
    rfToStandbyOne();
 632:	e6 df       	rcall	.-52     	; 0x600 <rfToStandbyOne>
    rfWritePayload(buff, len);
 634:	c8 01       	movw	r24, r16
 636:	6f 2d       	mov	r22, r15
 638:	65 dd       	rcall	.-1334   	; 0x104 <rfWritePayload>
    rfSetToTransmitMode();
 63a:	4a df       	rcall	.-364    	; 0x4d0 <rfSetToTransmitMode>
    CE_HIGH;
 63c:	c6 9a       	sbi	0x18, 6	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 63e:	8a e1       	ldi	r24, 0x1A	; 26
 640:	8a 95       	dec	r24
 642:	f1 f7       	brne	.-4      	; 0x640 <rfTransmit+0x18>
    _delay_us(10);
    CE_LOW;
 644:	c6 98       	cbi	0x18, 6	; 24
}
 646:	1f 91       	pop	r17
 648:	0f 91       	pop	r16
 64a:	ff 90       	pop	r15
 64c:	08 95       	ret

0000064e <rfReadRegBuff>:
    CE_LOW;
}

// reads the register and writes to the buffer
uint8_t rfReadRegBuff(uint8_t reg, uint8_t* buf, uint8_t len)
{
 64e:	0f 93       	push	r16
 650:	1f 93       	push	r17
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	eb 01       	movw	r28, r22
 658:	14 2f       	mov	r17, r20
    uint8_t status;

    CSN_LOW;
 65a:	c7 98       	cbi	0x18, 7	; 24
    status = spiSendData( R_REGISTER | reg );
 65c:	30 d0       	rcall	.+96     	; 0x6be <spiSendData>
 65e:	08 2f       	mov	r16, r24
 660:	04 c0       	rjmp	.+8      	; 0x66a <rfReadRegBuff+0x1c>
    while ( len-- )
        *buf++ = spiSendData(0xff);
 662:	8f ef       	ldi	r24, 0xFF	; 255
 664:	2c d0       	rcall	.+88     	; 0x6be <spiSendData>
 666:	89 93       	st	Y+, r24
 668:	11 50       	subi	r17, 0x01	; 1
{
    uint8_t status;

    CSN_LOW;
    status = spiSendData( R_REGISTER | reg );
    while ( len-- )
 66a:	11 23       	and	r17, r17
 66c:	d1 f7       	brne	.-12     	; 0x662 <rfReadRegBuff+0x14>
        *buf++ = spiSendData(0xff);
    CSN_HIGH;
 66e:	c7 9a       	sbi	0x18, 7	; 24

    return status;
}
 670:	80 2f       	mov	r24, r16
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	1f 91       	pop	r17
 678:	0f 91       	pop	r16
 67a:	08 95       	ret

0000067c <main>:

int main(void)
{

    return 0;
}
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	08 95       	ret

00000682 <spiInit>:

// initializing spi
void spiInit(void)
{
    // enabling spi
    SPCR |= (1<<SPE);
 682:	6e 9a       	sbi	0x0d, 6	; 13
    // selecting master mode
    SPCR |= (1<<MSTR);
 684:	6c 9a       	sbi	0x0d, 4	; 13
    // making pins output, the miso pin will be made input when spi is enabled
    SPI_DDR |= (1<<MOSI) | (1<<SCK);
 686:	87 b3       	in	r24, 0x17	; 23
 688:	88 62       	ori	r24, 0x28	; 40
 68a:	87 bb       	out	0x17, r24	; 23
}
 68c:	08 95       	ret

0000068e <spiSendBuffer>:

// sending the data stored in the buffer.
void spiSendBuffer(uint8_t *buffer, uint8_t len)
{
 68e:	fc 01       	movw	r30, r24
    do
    {
        SPI_DATA = *buffer;
 690:	80 81       	ld	r24, Z
 692:	8f b9       	out	0x0f, r24	; 15
        SPI_SEND;
 694:	77 9b       	sbis	0x0e, 7	; 14
 696:	fe cf       	rjmp	.-4      	; 0x694 <spiSendBuffer+0x6>
        buffer++;
    }
    while(len--);
 698:	66 23       	and	r22, r22
 69a:	19 f0       	breq	.+6      	; 0x6a2 <spiSendBuffer+0x14>
{
    do
    {
        SPI_DATA = *buffer;
        SPI_SEND;
        buffer++;
 69c:	31 96       	adiw	r30, 0x01	; 1
    }
    while(len--);
 69e:	61 50       	subi	r22, 0x01	; 1
 6a0:	f7 cf       	rjmp	.-18     	; 0x690 <spiSendBuffer+0x2>
 6a2:	08 95       	ret

000006a4 <spiGetBuffer>:
}

// gets the data from the radio and stores in the buffer
void spiGetBuffer(uint8_t *buffer, uint8_t len)
{
 6a4:	fc 01       	movw	r30, r24
    do
    {
        SPI_DATA = 0xff;
 6a6:	9f ef       	ldi	r25, 0xFF	; 255
 6a8:	9f b9       	out	0x0f, r25	; 15
        SPI_SEND;
 6aa:	77 9b       	sbis	0x0e, 7	; 14
 6ac:	fe cf       	rjmp	.-4      	; 0x6aa <spiGetBuffer+0x6>
        *buffer = SPI_DATA;
 6ae:	8f b1       	in	r24, 0x0f	; 15
 6b0:	80 83       	st	Z, r24
        buffer++;
    }
    while(len--);
 6b2:	66 23       	and	r22, r22
 6b4:	19 f0       	breq	.+6      	; 0x6bc <spiGetBuffer+0x18>
    do
    {
        SPI_DATA = 0xff;
        SPI_SEND;
        *buffer = SPI_DATA;
        buffer++;
 6b6:	31 96       	adiw	r30, 0x01	; 1
    }
    while(len--);
 6b8:	61 50       	subi	r22, 0x01	; 1
 6ba:	f6 cf       	rjmp	.-20     	; 0x6a8 <spiGetBuffer+0x4>
 6bc:	08 95       	ret

000006be <spiSendData>:
// sends any command
uint8_t spiSendData(uint8_t data)
{
    uint8_t result;

    SPI_DATA = data;
 6be:	8f b9       	out	0x0f, r24	; 15
    SPI_SEND;
 6c0:	77 9b       	sbis	0x0e, 7	; 14
 6c2:	fe cf       	rjmp	.-4      	; 0x6c0 <spiSendData+0x2>
    result = SPI_DATA;
 6c4:	8f b1       	in	r24, 0x0f	; 15
    // returns the status
    return result;
}
 6c6:	08 95       	ret

000006c8 <_exit>:
 6c8:	f8 94       	cli

000006ca <__stop_program>:
 6ca:	ff cf       	rjmp	.-2      	; 0x6ca <__stop_program>
